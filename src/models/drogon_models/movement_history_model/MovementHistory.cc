/**
 *
 *  MovementHistory.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "MovementHistory.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::cms_simulator_db;

const std::string MovementHistory::Cols::_time = "\"time\"";
const std::string MovementHistory::Cols::_simulator_id = "\"simulator_id\"";
const std::string MovementHistory::Cols::_session_id = "\"session_id\"";
const std::string MovementHistory::Cols::_object_id = "\"object_id\"";
const std::string MovementHistory::Cols::_latitude_bearing = "\"latitude_bearing\"";
const std::string MovementHistory::Cols::_longitude_range = "\"longitude_range\"";
const std::string MovementHistory::primaryKeyName = "";
const bool MovementHistory::hasPrimaryKey = false;
const std::string MovementHistory::tableName = "\"movement_history\"";

const std::vector<typename MovementHistory::MetaData> MovementHistory::metaData_={
{"time","::trantor::Date","timestamp with time zone",0,0,0,1},
{"simulator_id","int32_t","integer",4,0,0,1},
{"session_id","int32_t","integer",4,0,0,1},
{"object_id","int32_t","integer",4,0,0,1},
{"latitude_bearing","double","double precision",8,0,0,1},
{"longitude_range","double","double precision",8,0,0,1}
};
const std::string &MovementHistory::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
MovementHistory::MovementHistory(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["time"].isNull())
        {
            auto timeStr = r["time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                time_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["simulator_id"].isNull())
        {
            simulatorId_=std::make_shared<int32_t>(r["simulator_id"].as<int32_t>());
        }
        if(!r["session_id"].isNull())
        {
            sessionId_=std::make_shared<int32_t>(r["session_id"].as<int32_t>());
        }
        if(!r["object_id"].isNull())
        {
            objectId_=std::make_shared<int32_t>(r["object_id"].as<int32_t>());
        }
        if(!r["latitude_bearing"].isNull())
        {
            latitudeBearing_=std::make_shared<double>(r["latitude_bearing"].as<double>());
        }
        if(!r["longitude_range"].isNull())
        {
            longitudeRange_=std::make_shared<double>(r["longitude_range"].as<double>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                time_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            simulatorId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            sessionId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            objectId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            latitudeBearing_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            longitudeRange_=std::make_shared<double>(r[index].as<double>());
        }
    }

}

MovementHistory::MovementHistory(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[0]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                time_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            simulatorId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            sessionId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            objectId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            latitudeBearing_=std::make_shared<double>(pJson[pMasqueradingVector[4]].asDouble());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            longitudeRange_=std::make_shared<double>(pJson[pMasqueradingVector[5]].asDouble());
        }
    }
}

MovementHistory::MovementHistory(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("time"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["time"].isNull())
        {
            auto timeStr = pJson["time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                time_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("simulator_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["simulator_id"].isNull())
        {
            simulatorId_=std::make_shared<int32_t>((int32_t)pJson["simulator_id"].asInt64());
        }
    }
    if(pJson.isMember("session_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["session_id"].isNull())
        {
            sessionId_=std::make_shared<int32_t>((int32_t)pJson["session_id"].asInt64());
        }
    }
    if(pJson.isMember("object_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["object_id"].isNull())
        {
            objectId_=std::make_shared<int32_t>((int32_t)pJson["object_id"].asInt64());
        }
    }
    if(pJson.isMember("latitude_bearing"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["latitude_bearing"].isNull())
        {
            latitudeBearing_=std::make_shared<double>(pJson["latitude_bearing"].asDouble());
        }
    }
    if(pJson.isMember("longitude_range"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["longitude_range"].isNull())
        {
            longitudeRange_=std::make_shared<double>(pJson["longitude_range"].asDouble());
        }
    }
}

void MovementHistory::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[0]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                time_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            simulatorId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            sessionId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            objectId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            latitudeBearing_=std::make_shared<double>(pJson[pMasqueradingVector[4]].asDouble());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            longitudeRange_=std::make_shared<double>(pJson[pMasqueradingVector[5]].asDouble());
        }
    }
}

void MovementHistory::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("time"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["time"].isNull())
        {
            auto timeStr = pJson["time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                time_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("simulator_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["simulator_id"].isNull())
        {
            simulatorId_=std::make_shared<int32_t>((int32_t)pJson["simulator_id"].asInt64());
        }
    }
    if(pJson.isMember("session_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["session_id"].isNull())
        {
            sessionId_=std::make_shared<int32_t>((int32_t)pJson["session_id"].asInt64());
        }
    }
    if(pJson.isMember("object_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["object_id"].isNull())
        {
            objectId_=std::make_shared<int32_t>((int32_t)pJson["object_id"].asInt64());
        }
    }
    if(pJson.isMember("latitude_bearing"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["latitude_bearing"].isNull())
        {
            latitudeBearing_=std::make_shared<double>(pJson["latitude_bearing"].asDouble());
        }
    }
    if(pJson.isMember("longitude_range"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["longitude_range"].isNull())
        {
            longitudeRange_=std::make_shared<double>(pJson["longitude_range"].asDouble());
        }
    }
}

const ::trantor::Date &MovementHistory::getValueOfTime() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(time_)
        return *time_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &MovementHistory::getTime() const noexcept
{
    return time_;
}
void MovementHistory::setTime(const ::trantor::Date &pTime) noexcept
{
    time_ = std::make_shared<::trantor::Date>(pTime);
    dirtyFlag_[0] = true;
}

const int32_t &MovementHistory::getValueOfSimulatorId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(simulatorId_)
        return *simulatorId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MovementHistory::getSimulatorId() const noexcept
{
    return simulatorId_;
}
void MovementHistory::setSimulatorId(const int32_t &pSimulatorId) noexcept
{
    simulatorId_ = std::make_shared<int32_t>(pSimulatorId);
    dirtyFlag_[1] = true;
}

const int32_t &MovementHistory::getValueOfSessionId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(sessionId_)
        return *sessionId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MovementHistory::getSessionId() const noexcept
{
    return sessionId_;
}
void MovementHistory::setSessionId(const int32_t &pSessionId) noexcept
{
    sessionId_ = std::make_shared<int32_t>(pSessionId);
    dirtyFlag_[2] = true;
}

const int32_t &MovementHistory::getValueOfObjectId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(objectId_)
        return *objectId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MovementHistory::getObjectId() const noexcept
{
    return objectId_;
}
void MovementHistory::setObjectId(const int32_t &pObjectId) noexcept
{
    objectId_ = std::make_shared<int32_t>(pObjectId);
    dirtyFlag_[3] = true;
}

const double &MovementHistory::getValueOfLatitudeBearing() const noexcept
{
    static const double defaultValue = double();
    if(latitudeBearing_)
        return *latitudeBearing_;
    return defaultValue;
}
const std::shared_ptr<double> &MovementHistory::getLatitudeBearing() const noexcept
{
    return latitudeBearing_;
}
void MovementHistory::setLatitudeBearing(const double &pLatitudeBearing) noexcept
{
    latitudeBearing_ = std::make_shared<double>(pLatitudeBearing);
    dirtyFlag_[4] = true;
}

const double &MovementHistory::getValueOfLongitudeRange() const noexcept
{
    static const double defaultValue = double();
    if(longitudeRange_)
        return *longitudeRange_;
    return defaultValue;
}
const std::shared_ptr<double> &MovementHistory::getLongitudeRange() const noexcept
{
    return longitudeRange_;
}
void MovementHistory::setLongitudeRange(const double &pLongitudeRange) noexcept
{
    longitudeRange_ = std::make_shared<double>(pLongitudeRange);
    dirtyFlag_[5] = true;
}

void MovementHistory::updateId(const uint64_t id)
{
}

const std::vector<std::string> &MovementHistory::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "time",
        "simulator_id",
        "session_id",
        "object_id",
        "latitude_bearing",
        "longitude_range"
    };
    return inCols;
}

void MovementHistory::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getTime())
        {
            binder << getValueOfTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getSimulatorId())
        {
            binder << getValueOfSimulatorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSessionId())
        {
            binder << getValueOfSessionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getObjectId())
        {
            binder << getValueOfObjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLatitudeBearing())
        {
            binder << getValueOfLatitudeBearing();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLongitudeRange())
        {
            binder << getValueOfLongitudeRange();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> MovementHistory::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void MovementHistory::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getTime())
        {
            binder << getValueOfTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getSimulatorId())
        {
            binder << getValueOfSimulatorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSessionId())
        {
            binder << getValueOfSessionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getObjectId())
        {
            binder << getValueOfObjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLatitudeBearing())
        {
            binder << getValueOfLatitudeBearing();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLongitudeRange())
        {
            binder << getValueOfLongitudeRange();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value MovementHistory::toJson() const
{
    Json::Value ret;
    if(getTime())
    {
        ret["time"]=getTime()->toDbStringLocal();
    }
    else
    {
        ret["time"]=Json::Value();
    }
    if(getSimulatorId())
    {
        ret["simulator_id"]=getValueOfSimulatorId();
    }
    else
    {
        ret["simulator_id"]=Json::Value();
    }
    if(getSessionId())
    {
        ret["session_id"]=getValueOfSessionId();
    }
    else
    {
        ret["session_id"]=Json::Value();
    }
    if(getObjectId())
    {
        ret["object_id"]=getValueOfObjectId();
    }
    else
    {
        ret["object_id"]=Json::Value();
    }
    if(getLatitudeBearing())
    {
        ret["latitude_bearing"]=getValueOfLatitudeBearing();
    }
    else
    {
        ret["latitude_bearing"]=Json::Value();
    }
    if(getLongitudeRange())
    {
        ret["longitude_range"]=getValueOfLongitudeRange();
    }
    else
    {
        ret["longitude_range"]=Json::Value();
    }
    return ret;
}

Json::Value MovementHistory::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getTime())
            {
                ret[pMasqueradingVector[0]]=getTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getSimulatorId())
            {
                ret[pMasqueradingVector[1]]=getValueOfSimulatorId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getSessionId())
            {
                ret[pMasqueradingVector[2]]=getValueOfSessionId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getObjectId())
            {
                ret[pMasqueradingVector[3]]=getValueOfObjectId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getLatitudeBearing())
            {
                ret[pMasqueradingVector[4]]=getValueOfLatitudeBearing();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getLongitudeRange())
            {
                ret[pMasqueradingVector[5]]=getValueOfLongitudeRange();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getTime())
    {
        ret["time"]=getTime()->toDbStringLocal();
    }
    else
    {
        ret["time"]=Json::Value();
    }
    if(getSimulatorId())
    {
        ret["simulator_id"]=getValueOfSimulatorId();
    }
    else
    {
        ret["simulator_id"]=Json::Value();
    }
    if(getSessionId())
    {
        ret["session_id"]=getValueOfSessionId();
    }
    else
    {
        ret["session_id"]=Json::Value();
    }
    if(getObjectId())
    {
        ret["object_id"]=getValueOfObjectId();
    }
    else
    {
        ret["object_id"]=Json::Value();
    }
    if(getLatitudeBearing())
    {
        ret["latitude_bearing"]=getValueOfLatitudeBearing();
    }
    else
    {
        ret["latitude_bearing"]=Json::Value();
    }
    if(getLongitudeRange())
    {
        ret["longitude_range"]=getValueOfLongitudeRange();
    }
    else
    {
        ret["longitude_range"]=Json::Value();
    }
    return ret;
}

bool MovementHistory::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("time"))
    {
        if(!validJsonOfField(0, "time", pJson["time"], err, true))
            return false;
    }
    if(pJson.isMember("simulator_id"))
    {
        if(!validJsonOfField(1, "simulator_id", pJson["simulator_id"], err, true))
            return false;
    }
    else
    {
        err="The simulator_id column cannot be null";
        return false;
    }
    if(pJson.isMember("session_id"))
    {
        if(!validJsonOfField(2, "session_id", pJson["session_id"], err, true))
            return false;
    }
    else
    {
        err="The session_id column cannot be null";
        return false;
    }
    if(pJson.isMember("object_id"))
    {
        if(!validJsonOfField(3, "object_id", pJson["object_id"], err, true))
            return false;
    }
    else
    {
        err="The object_id column cannot be null";
        return false;
    }
    if(pJson.isMember("latitude_bearing"))
    {
        if(!validJsonOfField(4, "latitude_bearing", pJson["latitude_bearing"], err, true))
            return false;
    }
    else
    {
        err="The latitude_bearing column cannot be null";
        return false;
    }
    if(pJson.isMember("longitude_range"))
    {
        if(!validJsonOfField(5, "longitude_range", pJson["longitude_range"], err, true))
            return false;
    }
    else
    {
        err="The longitude_range column cannot be null";
        return false;
    }
    return true;
}
bool MovementHistory::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool MovementHistory::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("time"))
    {
        if(!validJsonOfField(0, "time", pJson["time"], err, false))
            return false;
    }
    if(pJson.isMember("simulator_id"))
    {
        if(!validJsonOfField(1, "simulator_id", pJson["simulator_id"], err, false))
            return false;
    }
    if(pJson.isMember("session_id"))
    {
        if(!validJsonOfField(2, "session_id", pJson["session_id"], err, false))
            return false;
    }
    if(pJson.isMember("object_id"))
    {
        if(!validJsonOfField(3, "object_id", pJson["object_id"], err, false))
            return false;
    }
    if(pJson.isMember("latitude_bearing"))
    {
        if(!validJsonOfField(4, "latitude_bearing", pJson["latitude_bearing"], err, false))
            return false;
    }
    if(pJson.isMember("longitude_range"))
    {
        if(!validJsonOfField(5, "longitude_range", pJson["longitude_range"], err, false))
            return false;
    }
    return true;
}
bool MovementHistory::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool MovementHistory::validJsonOfField(size_t index,
                                       const std::string &fieldName,
                                       const Json::Value &pJson,
                                       std::string &err,
                                       bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
